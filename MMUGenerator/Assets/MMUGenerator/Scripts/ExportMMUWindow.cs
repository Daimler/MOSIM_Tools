// SPDX-License-Identifier: MIT
// The content of this file has been developed in the context of the MOSIM research project.
// Original author(s): Felix Gaisbauer

#if UNITY_EDITOR
using UnityEditor;
using System.IO;
using UnityEngine;
using System.Linq;
using System.Collections.Generic;
using System.IO.Compression;
using MMIStandard;
using MMICSharp.Common.Communication;
using MMIUnity;

/// <summary>
/// Window for generating and exporting the MMU
/// </summary>
public class ExportMMUWindow : EditorWindow
{

    /// <summary>
    /// The corresponding MMU description
    /// </summary>
    private MMUDescription description = new MMUDescription();

    private void Awake()
    {
        try
        {
            GameObject active = Selection.activeObject as GameObject;

            string jsonString = System.IO.File.ReadAllText("Assets//" + active.name + "//description.json");

            description = Serialization.FromJsonString<MMUDescription>(jsonString);

            Debug.Log("Available description file loaded");
        }
        catch (System.Exception)
        {
            Debug.Log("Problem loading description file! A new one is created.");
        }
    }



    void OnGUI()
    {
        EditorGUILayout.LabelField("Please enter the relevant description of the desired MMU:");


        //Show all properties
        description.Name = EditorGUILayout.TextField("Name", description.Name);
        description.MotionType = EditorGUILayout.TextField("MotionType", description.MotionType);
        description.Author = EditorGUILayout.TextField("Author", description.Author);
        description.ShortDescription = EditorGUILayout.TextField("ShortDescription", description.ShortDescription);
        description.LongDescription = EditorGUILayout.TextField("LongDescription", description.LongDescription);
        description.Version = EditorGUILayout.TextField("Version", description.Version);



        if (GUILayout.Button("Export"))
        {
            string outputPath = EditorUtility.SaveFilePanel("Select the output file", "GeneratedMMUs/", description.Name, "zip");

            //Call the generate MMU function and wait for response
            bool success = GenerateMMU(description, outputPath);

            Close();

            if (success)
            {
                EditorUtility.DisplayDialog("MMU successfully exported.", "The MMU has been successfully exported to your desired output directory.", "Continue");
            }

        }

        if (GUILayout.Button("Abort"))
            Close();
    }


    [MenuItem("MMI/Export MMU", false,1)]
    public static void GenerateMMU()
    {
        ExportMMUWindow window = CreateInstance<ExportMMUWindow>();
        window.ShowUtility();
    }

    [MenuItem("Assets/Export MMU")]
    public static void GenerateMMUAssets()
    {
        ExportMMUWindow window = CreateInstance<ExportMMUWindow>();
        window.ShowUtility();
    }


    [MenuItem("Assets/Export MMU", true)]
    public static bool GenerateMMUAssetsValidation()
    {
        //Check if current folder contains a description
        return PrefabUtility.IsPartOfAnyPrefab(Selection.activeObject);// && Selection.activeObject.name.Contains(description.Name);
    }


    /// <summary>
    /// Generats a MMU with the given name
    /// </summary>
    /// <param name="mmuName"></param>
    public static bool GenerateMMU(MMUDescription description, string outputPath)
    {
        //Create a temp directory
        string tempDirectory = "TempAutoGenerated/";
        if (Directory.Exists(tempDirectory))
            Directory.Delete(tempDirectory, true);

        Directory.CreateDirectory(tempDirectory);


        //Change the name of the bundle 
        MMUGenerator.ChangeBundleName(description.Name);

        //Build the asset bundle and place in autogenerated
        BuildPipeline.BuildAssetBundles(tempDirectory, BuildAssetBundleOptions.None, BuildTarget.StandaloneWindows);

        //Get the selected game object
        GameObject selected = (GameObject)Selection.objects.First(s => s is GameObject);

        //Find all specific class files
        List<string> classFiles = MMUGenerator.GetFiles("Assets//" + description.Name + "//Scripts//").Where(s => Path.GetExtension(s) == ".cs").ToList();

        //Add  all common class files
        classFiles.AddRange(MMUGenerator.GetFiles("Assets//MMUGenerator//CommonScripts").Where(s => Path.GetExtension(s) == ".cs").ToList());


        //Add the required dependencies for a basic MMU
        List<string> dllFiles = MMUGenerator.GetFiles("Assets//MMUGenerator//Dependencies").Where(s => Path.GetExtension(s) == ".dll").ToList();

        //Add the specific dependencies for the MMU (if defined)
        dllFiles.AddRange(MMUGenerator.GetFiles("Assets//" + description.Name + "//Dependencies").Where(s => Path.GetExtension(s) == ".dll").ToList());

        //Generate the dll based on the given class and dll files
        if(!MMUGenerator.GenerateDll(classFiles, dllFiles, tempDirectory, description.Name))
        {
            EditorUtility.DisplayDialog("Error at generating dll.", "Dll cannot be compiled. Please check the error messages and ensure that all required dependencies (despite the ones in MMUGenerator/Dependencies) are in the dependencies folder of the MMU. " +
                "Moreover please ensure that all references source code cs files are either in the Scripts folder of the MMU or in the CommonSourceFolder of the MMUGenerator.", "Continue");
            return false;
        }

        //Generate the description file
        MMUGenerator.GenerateDescription(description, tempDirectory);

        //Cleanup the directory
        MMUGenerator.CleanUpDirectory(tempDirectory, description.Name);
        
        //Create a zip archive
        ZipFile.CreateFromDirectory(tempDirectory, outputPath);

        //Remove all temporary generated files
        string[] tempFiles = Directory.GetFiles(tempDirectory);
        for (int i = 0; i < tempFiles.Length; i++)
        {
            File.Delete(tempFiles[i]);
        }

        //Remove the temp directory
        Directory.Delete(tempDirectory);


        EditorUtility.RevealInFinder(outputPath);

        Debug.Log("MMU successfully generated!");

        return true;

    }

}

#endif